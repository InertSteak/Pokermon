[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

#Nested check
[[patches]]
[patches.module]
source = "setup.lua"
before = "main.lua"
name = "pokermon.setup"

# Localization color
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "legendary = G.C.RARITY[4],"
position = "after"
payload = "poke_safari = G.C.RARITY['poke_safari'], poke_mega = G.C.RARITY['poke_mega'],"
match_indent = true

# Pokemon only functionality
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if v.yes_pool_flag and not G.GAME.pool_flags[v.yes_pool_flag] then add = nil end"
position = "after"
payload = '''
if v.set == 'Joker' and not v.stage and pokermon_config and pokermon_config.pokemon_only then add = nil end
if v.set == 'Joker' and v.stage and not get_gen_allowed(v) then add = nil end
if v.set == 'Joker' and v.stage and pokermon_config and not pokermon_config.hazards_on and v.hazard_poke then add = nil end
if add and v.set == 'Joker' and v.stage and poke_family_present(v) then add = nil end
'''
match_indent = true

# Magikarp functionality
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if next(find_joker('Splash')) then"
position = "at"
payload = "if next(find_joker('Splash')) or applies_splash() then"
match_indent = true

# Magikarp functionality better calc
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local splashed = SMODS.always_scores(G.play.cards[i]) or next(find_joker('Splash'))"
position = "at"
payload = '''
local splashed = SMODS.always_scores(G.play.cards[i]) or next(find_joker('Splash')) or applies_splash()
'''
match_indent = true

# Mimikyu Localization Functionality
[[patches]]
[patches.regex]
target = 'functions/state_events.lua'
pattern = '''if eval.saved then
  game_over = false
end'''
position = 'after'
payload = '''
  if not G.localization.misc.dictionary.ph_mr_bones_numbutils then
    G.localization.misc.dictionary.ph_mr_bones_numbutils = ""..G.localization.misc.dictionary.ph_mr_bones
  end
  G.localization.misc.dictionary.ph_mr_bones = G.localization.misc.dictionary.ph_mr_bones_numbutils:gsub("Mr. Bones", G.localization.descriptions.Joker[G.jokers.cards[i].config.center.key].name)
  '''
  
# Extra Booster Functionality
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.added_to_deck = true"
position = "after"
payload = '''
if self.config.shiny_on_add and not self.debuff then
  self.config.shiny_on_add = false
  SMODS.change_booster_limit(1)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.added_to_deck = false"
position = "after"
payload = '''
if self.edition and self.edition.poke_shiny and G.jokers then
  if G.GAME.modifiers.poke_booster_packs then
    G.GAME.modifiers.poke_booster_packs = G.GAME.modifiers.poke_booster_packs - 1
  else
    G.GAME.modifiers.poke_booster_packs = 0
  end
end
'''
match_indent = true

# Resize Booster Pack UI for new options & Xatu - Resize Pack for All Planets
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "booster_obj = self.config.center"
position = "after"
payload = '''
if self.ability.name:find('Celestial') and next(find_joker("xatu")) then
  self.ability.extra = #G.P_CENTER_POOLS.Planet
elseif G.GAME.extra_pocket_picks and G.GAME.extra_pocket_picks > 0 then
  self.ability.extra = self.ability.extra + G.GAME.extra_pocket_picks
end
'''
match_indent = true

# Xatu Make All Planets Appear
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/game_object.lua"]'
pattern = "if G.GAME.used_vouchers.v_telescope and i == 1 then"
position = "at"
payload = '''
if next(find_joker("xatu")) then
    local _planet = G.P_CENTER_POOLS.Planet[i].key
    _card = create_card("Planet", G.pack_cards, nil, nil, true, true, _planet, 'pl1')
elseif G.GAME.used_vouchers.v_telescope and i == 1 then
'''
match_indent = true
overwrite = true

#Shiny shader
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if (self.edition and self.edition.negative) or (self.ability.name == 'Antimatter' and (self.config.center.discovered or self.bypass_discovery_center)) then
    self.children.center:draw_shader('negative_shine', nil, self.ARGS.send_to_shader)
end
'''
position = "after"
payload = '''
if (self.edition and self.edition.poke_shiny) and self.config.center and type(self.config.center) == "table" and not (self.config.center.stage or self.config.center.shiny) 
and self.label ~= "e_poke_shiny" then
    self.children.center:draw_shader('poke_shiny', nil, self.ARGS.send_to_shader)
end
'''
match_indent = true

#Gothita line functionality
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if (self.ability.set == 'Planet' or (self.ability.set == 'Booster' and self.ability.name:find('Celestial'))) and #find_joker('Astronomer') > 0 then self.cost = 0 end
'''
position = "after"
payload = '''
if self.ability.set == 'Booster' then self.cost = math.max(0, self.cost - 1 * #find_joker('rotom')) end
if self.ability.set == 'Booster' then self.cost = math.max(0, self.cost - (G.GAME.rotom_discount or 0) * #find_joker('rotomdex')) end
if (self.ability.set == 'Planet' or (self.ability.set == 'Booster' and self.ability.name:find('Celestial'))) and #find_joker('gothita') > 0 then self.cost = math.max(0, self.cost - 2 * #find_joker('gothita')) end
if (self.ability.set == 'Planet' or (self.ability.set == 'Booster' and self.ability.name:find('Celestial'))) and #find_joker('gothorita') > 0 then self.cost = math.max(0, self.cost - 3 * #find_joker('gothorita')) end
if (self.ability.set == 'Planet' or (self.ability.set == 'Booster' and self.ability.name:find('Celestial'))) and #find_joker('gothitelle') > 0 then self.cost = 0 end
'''
match_indent = true

#Drain functionality
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.sell_cost = math.max(1, math.floor(self.cost/2)) + (self.ability.extra_value or 0)"
position = "after"
payload = '''
if self.sell_cost < 1 then self.sell_cost = 1 end
if self.ability.name == "unown" then self.sell_cost = 0 end
'''
match_indent = true

#Deck functionality
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if card.ability.consumeable and not skip_materialize then card:start_materialize() end"
position = "after"
payload = '''
if front and G.GAME.modifiers.poke_force_seal then card:set_seal(G.GAME.modifiers.poke_force_seal) end
if _type == 'Joker' and G.GAME.modifiers.apply_type then apply_type_sticker(card); energy_increase(card, type_sticker_applied(card)) end
'''
match_indent = true

# Splash Screen
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_joker'])"
position = "after"
payload = '''
if pokermon_config.pokemon_splash then
  local pokemon = {}
  for k, v in pairs(G.P_CENTERS) do
    if v.set == 'Joker' and v.stage and v.discovered then
      table.insert(pokemon, v)
    end
  end
  if #pokemon > 0 then
    local chosen = math.random(#pokemon)
    local chosencard = pokemon[chosen]
    SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, chosencard)
  end
end
'''
match_indent = true

# Replace start menu logo with Pokermon
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''
G.SPLASH_LOGO = Sprite(0, 0, 
    13*SC_scale, 
    13*SC_scale*(G.ASSET_ATLAS["balatro"].py/G.ASSET_ATLAS["balatro"].px),
    G.ASSET_ATLAS["balatro"], {x=0,y=0})
'''
position = "after"
payload = '''
    if pokermon_config.pokemon_title then
      local poke_logo = pokermon_config.pokemon_aprilfools and "poke_smeargle_logo" or "poke_logo"
      G.SPLASH_LOGO = Sprite(0, 0, 
          13/333*389*SC_scale, 
          13/333*389*SC_scale*(G.ASSET_ATLAS[poke_logo].py/G.ASSET_ATLAS[poke_logo].px),
          G.ASSET_ATLAS[poke_logo], {x=0.0,y=0})
    end
'''
match_indent = true
overwrite = true


# Replace start menu card with unown
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''
local replace_card = Card(self.title_top.T.x, self.title_top.T.y, 1.2*G.CARD_W*SC_scale, 1.2*G.CARD_H*SC_scale, G.P_CARDS.S_A, G.P_CENTERS.c_base)
'''
position = "at"
payload = '''
local replace_card = nil
if pokermon_config.pokemon_title then
  replace_card = Card(self.title_top.T.x, self.title_top.T.y, 1.2*G.CARD_W*SC_scale, 1.2*G.CARD_H*SC_scale, G.P_CARDS.empty, G.P_CENTERS.j_poke_unown)
  replace_card.ability.extra.form = "R"
  G.P_CENTERS.j_poke_unown:set_sprites(replace_card)
else
  replace_card = Card(self.title_top.T.x, self.title_top.T.y, 1.2*G.CARD_W*SC_scale, 1.2*G.CARD_H*SC_scale, G.P_CARDS.S_A, G.P_CENTERS.c_base)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "replace_card.states.visible = false"
position = "after"
payload = '''
if pokermon_config.pokemon_title then
  replace_card.seal = nil
end
'''
match_indent = true

# Description functionality, a little hacky but it works
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
if main_end then 
    desc_nodes[#desc_nodes+1] = main_end 
end
'''
position = "after"
payload = '''
if (_c.set == 'Item' or _c.set == 'Energy') and _c.poke_add_desc then
  localize{type = 'descriptions', key = _c.key, set = _c.set, nodes = desc_nodes, vars = loc_vars}
end
'''
match_indent = true

# Shortcut Pareidolia Four Fingers effects
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = '''function find_joker(name, non_debuff)'''
position = 'after'
payload = '''
if name == "Shortcut" then
  local asdf = find_joker("poke_Shortcut")
  local dsaf = find_joker("pansage")
  local safd = find_joker("simisage")
  return (next(asdf) and asdf) or (next(dsaf) and dsaf) or (next(safd) and safd) or {}
elseif name == "Pareidolia" then
  local asdf = find_joker("poke_Pareidolia")
  local dsaf = find_joker("panpour")
  local safd = find_joker("simipour")
  return (next(asdf) and asdf) or (next(dsaf) and dsaf) or (next(safd) and safd) or {}
elseif name == "Four Fingers" then
  local asdf = find_joker("poke_Four_Fingers")
  local dsaf = find_joker("pansear")
  local safd = find_joker("simisear")
  return (next(asdf) and asdf) or (next(dsaf) and dsaf) or (next(safd) and safd) or {}
elseif name == "Smeared Joker" then
  local smeared = find_joker("poke_Smeared_Joker")
  local smeargle = find_joker("smeargle")
  return (next(smeared) and smeared) or (next(smeargle) and smeargle) or {}
elseif name == "poke_Shortcut" then
  name = "Shortcut"
elseif name == "poke_Pareidolia" then
  name = "Pareidolia"
elseif name == "poke_Four_Fingers" then
  name = "Four Fingers"
elseif name == "poke_Smeared_Joker" then
  name = "Smeared Joker"
end
'''
match_indent = true

#Joker emplace patch
[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = '''self.cards[#self.cards+1] = card'''
position = 'at'
payload = '''  
if type(location) == "number" then
  table.insert(self.cards, location, card)
else
  self.cards[#self.cards+1] = card
end
'''
match_indent = true

# Card Effect Divider
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = "elseif part.control.X or part.control.B then"
position = "before"
payload = '''
elseif part.control.br then
  local height = 0.05
  local gaps = 0.2
  local mid = 0.15
  local sides = (tonumber(part.control.br) - gaps*2 - mid) / 2
  -- spacing
  args.nodes[#args.nodes+1] = {{n=G.UIT.R, config={align = "cm", minh = height}, nodes={}}}
  if sides < gaps then
    args.nodes[#args.nodes+1] = {{n=G.UIT.C, config={align = "cm", colour = G.C.UI.TRANSPARENT_DARK, minw = tonumber(part.control.br), minh = height}}}
  else
    local temp_nodes = {{n=G.UIT.C, config={align = "cm", colour = G.C.UI.TRANSPARENT_DARK, minw = sides, minh = height}, nodes={}},
                        {n=G.UIT.C, config={align = "cm", minw = gaps}, nodes={}},
                        {n=G.UIT.C, config={align = "cm", colour = G.C.UI.TEXT_INACTIVE, minw = mid, minh = height}, nodes={}},
                        {n=G.UIT.C, config={align = "cm", minw = gaps}, nodes={}},
                        {n=G.UIT.C, config={align = "cm", colour = G.C.UI.TRANSPARENT_DARK, minw = sides, minh = height}, nodes={}}}
    args.nodes[#args.nodes+1] = {{n=G.UIT.R, config={align = "cm", minw = tonumber(part.control.br)}, nodes=temp_nodes}}
  end
'''
match_indent = true

# For previous versions
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = "elseif part.control.X then"
position = "before"
payload = '''
elseif part.control.br then
  local height = 0.05
  local gaps = 0.2
  local mid = 0.15
  local sides = (tonumber(part.control.br) - gaps*2 - mid) / 2
  -- spacing
  args.nodes[#args.nodes+1] = {{n=G.UIT.R, config={align = "cm", minh = height}, nodes={}}}
  if sides < gaps then
    args.nodes[#args.nodes+1] = {{n=G.UIT.C, config={align = "cm", colour = G.C.UI.TRANSPARENT_DARK, minw = tonumber(part.control.br), minh = height}}}
  else
    local temp_nodes = {{n=G.UIT.C, config={align = "cm", colour = G.C.UI.TRANSPARENT_DARK, minw = sides, minh = height}, nodes={}},
                        {n=G.UIT.C, config={align = "cm", minw = gaps}, nodes={}},
                        {n=G.UIT.C, config={align = "cm", colour = G.C.UI.TEXT_INACTIVE, minw = mid, minh = height}, nodes={}},
                        {n=G.UIT.C, config={align = "cm", minw = gaps}, nodes={}},
                        {n=G.UIT.C, config={align = "cm", colour = G.C.UI.TRANSPARENT_DARK, minw = sides, minh = height}, nodes={}}}
    args.nodes[#args.nodes+1] = {{n=G.UIT.R, config={align = "cm", minw = tonumber(part.control.br)}, nodes=temp_nodes}}
  end
'''
match_indent = true


#Make sure evolve before debuff
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.perish_tally == 1 then"
position = "at"
payload = "if self.ability.perish_tally and self.ability.perish_tally == 1 and not (self.ability and self.ability.extra and type(self.ability.extra) == 'table' and self.ability.extra.rounds and self.ability.extra.rounds <= 1) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.ability.perish_tally = 0"
position = "after"
payload = '''
if self.edition and self.edition.poke_shiny then
  SMODS.change_booster_limit(-1)
end
'''
match_indent = true

# Jirachi Double Payout and DRE
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if total_cashout_rows > 7 then"
position = "before"
payload = '''
local jirachis = find_joker('jirachi_banker')
for i = 1, #jirachis do
  add_round_eval_row({bonus = true, name='joker_jirachi'..i, pitch = pitch, dollars = dollars, card = jirachis[i]})
  dollars = dollars + dollars
end
if G.GAME.modifiers.reset_no_interest then
  G.GAME.modifiers.no_interest = nil
end
'''
match_indent = true

#Jirachi tag fix
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "if self.name == 'Double Tag' and _context.tag.key ~= 'tag_double' then"
position = "at"
payload = "if self.name == 'Double Tag' and _context.tag.key ~= 'tag_double' and _context.tag.key ~= 'tag_poke_jirachi_tag' then"
match_indent = true

#Probopass face
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if (id > 0 and rank and rank.face) or next(find_joker("Pareidolia")) then
    return true
end
'''
position = "after"
payload = '''
if next(SMODS.find_card('j_poke_probopass')) and self.ability.name == 'Stone Card' then return true end
'''
match_indent = true


# Scry Functionality 1
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "if #G.hand.cards < 1 and #G.deck.cards < 1 and #G.play.cards < 1 then"
position = "before"
payload = '''
if not self.scry_view and type(create_scry_cardarea) == "function" then
  self.scry_view = create_scry_cardarea()
elseif self.scry_view then
  update_scry_cardarea(self.scry_view)
end
'''
match_indent = true

# Scry Functionality 2
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = "if self.config.type == 'hand' or self.config.type == 'play' or self.config.type == 'title' or self.config.type == 'voucher' then"
position = "at"
payload = "if self.config.type == 'hand' or self.config.type == 'scry' or self.config.type == 'play' or self.config.type == 'title' or self.config.type == 'voucher' then"
match_indent = true
overwrite = true


# Scry Functionality 3
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = "if self.config.type == 'hand' and not (G.STATE == G.STATES.TAROT_PACK or G.STATE == G.STATES.SPECTRAL_PACK or G.STATE == G.STATES.PLANET_PACK or G.STATE == G.STATES.SMODS_BOOSTER_OPENED) then"
position = "at"
payload = "if self.config.type == 'scry' or self.config.type == 'hand' and not (G.STATE == G.STATES.TAROT_PACK or G.STATE == G.STATES.SPECTRAL_PACK or G.STATE == G.STATES.PLANET_PACK or G.STATE == G.STATES.SMODS_BOOSTER_OPENED) then"
match_indent = true
overwrite = true

# Scry Functionality 4
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "function Game:update_round_eval(dt)"
position = "after"
payload = '''
    if G.scry_view then hide_scry_cardarea() end
'''
match_indent = true

# Scry Functionality 5
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = "-- TARGET: add your own CardAreas for playing card evaluation"
position = "after"
payload = '''
if G.scry_view and G.scry_view.cards then
    t[#t+1] = G.scry_view
end
'''
match_indent = true

# Scry Functionality 3
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local config = {}"
position = "before"
payload = '''
if card.area == G.scry_view then
    y_off = -0.05*G.CARD_H
    card_aligned = 'tm'
end
'''
match_indent = true


#Zorua Rental Incompatibility
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
self.ability.rental = _rental
self:set_cost()
'''
position = "at"
payload = '''
if self.config.center.rental_compat ~= false and not self.ability.rental then 
    self.ability.rental = _rental
    self:set_cost()
end
'''
match_indent = true
overwrite = true

#Tutorial Functionality
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local row_dollars_chips = G.HUD:get_UIE_by_ID('row_dollars_chips')"
position = "at"
payload = "local row_dollars_chips = G.HUD and G.HUD:get_UIE_by_ID('row_dollars_chips')"
match_indent = true


# Misdreavus check for over-drained chips (in ui creation)
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "elseif card_type == 'Default' or card_type == 'Enhanced' then"
position = "after"
payload = "poke_stabilize_chip_drain(self)"
match_indent = true

# Misdreavus add nominal drain (UI)
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "elseif self.ability.set == 'Joker' then -- all remaining jokers"
position = "before"
payload = '''
if loc_vars.nominal_chips then
  loc_vars.nominal_chips = loc_vars.nominal_chips - (self.ability.nominal_drain or 0)
  if not loc_vars.bonus_chips and (self.ability.bonus ~= 0 or self.ability.perma_bonus ~= 0) then
      loc_vars.bonus_chips = bonus_chips
  end
end
'''
match_indent = true

# Misdreavus add nominal drain (functionality)
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "return self.base.nominal + self.ability.bonus + (self.ability.perma_bonus or 0)"
position = "at"
payload = '''
  poke_stabilize_chip_drain(self)
  return self.base.nominal - self.ability.nominal_drain + self.ability.bonus + self.ability.perma_bonus
'''
match_indent = true

# Controller support for reserving
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''
base_attach.children.use = G.UIDEF.card_focus_button{
  card = card, parent = base_attach, type = 'use',
  func = 'can_use_consumeable', button = 'use_card', card_width = card_width
}
'''
position = "at"
payload = '''
local reserve_and_use = nil
if (G.STATE == G.STATES.SMODS_BOOSTER_OPENED and SMODS.OPENED_BOOSTER.label:find("Pocket")) or (G.GAME.poke_save_all and not SMODS.OPENED_BOOSTER.label:find("Wish")) 
or (card.ability.name == 'megastone') then
  base_attach.children.reserve = G.UIDEF.card_focus_button{
    card = card, parent = base_attach, type = 'reserve',
    func = 'can_reserve_card', button = 'Can Reserve', card_width = card_width
  }
  reserve_and_use = true
end
base_attach.children.use = G.UIDEF.card_focus_button{
  card = card, parent = base_attach, type = 'use',
  func = 'can_use_consumeable', button = 'use_card', card_width = card_width, reserve_and_use = reserve_and_use
}
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''
  elseif args.type == 'buy_and_use' then
    button_contents = 
    {n=G.UIT.C, config={align = "cr"}, nodes={
      {n=G.UIT.R, config={align = "cr", maxw = 1}, nodes={
        {n=G.UIT.T, config={text = localize('b_buy'),colour = G.C.UI.TEXT_LIGHT, scale = 0.4, shadow = true}}
      }},
      {n=G.UIT.R, config={align = "cr", maxw = 1}, nodes={
        {n=G.UIT.T, config={text = localize('b_and_use'),colour = G.C.WHITE, scale = 0.3, shadow = true}},
      }}
    }}
  end
'''
position = "before"
payload = '''
  elseif args.type == 'reserve' then
    button_contents = 
    {n=G.UIT.C, config={align = "cr"}, nodes={
      {n=G.UIT.R, config={align = "cr", maxw = 1}, nodes={
        {n=G.UIT.T, config={text = localize('b_save'),colour = G.C.UI.TEXT_LIGHT, scale = 0.4, shadow = true}}
      }},
    }}
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''
focus_args = {button = args.type == 'sell' and 'leftshoulder' or args.type == 'buy_and_use' and 'leftshoulder' or 'rightshoulder', scale = 0.55, orientation = args.type == 'sell' and 'tli' or 'tri', offset = {x = args.type == 'sell' and 0.1 or -0.1, y = 0}, type = 'none'},
'''
position = "at"
payload = '''
focus_args = {button = args.type == 'sell' and 'leftshoulder' or args.type == 'buy_and_use' and 'leftshoulder' or args.type == 'reserve' and 'leftshoulder' or 'rightshoulder', scale = 0.55, orientation = args.type == 'sell' and 'tli' or 'tri', offset = {x = args.type == 'sell' and 0.1 or -0.1, y = 0}, type = 'none'},
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''
offset = {x=(args.type == 'sell' and -1 or 1)*((args.card_width or 0) - 0.17 - args.card.T.w/2),y=args.type == 'buy_and_use' and 0.6 or (args.buy_and_use) and -0.6 or 0}, 
'''
position = "at"
payload = '''
offset = {x=(args.type == 'sell' and -1 or 1)*((args.card_width or 0) - 0.17 - args.card.T.w/2),y=args.type == 'buy_and_use' and 0.6 or (args.buy_and_use) and -0.6 or args.type == 'reserve' and 0.6 or (args.reserve_and_use) and -0.6 or 0}, 
'''
match_indent = true

#Smeargle Tooltip loc_vars fix
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if vars_only then return loc_vars, main_start, main_end end"
position = "before"
payload = '''
if vars_only and type(self.ability.loc_vars_replacement) == "table" then
  loc_vars = self.ability.loc_vars_replacement
end
'''
match_indent = true

# Smeargle fix with copy effects
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
new_card:set_base(other.config.card)
'''
position = "after"
payload = '''
if other.config.center.name == "smeargle" then
  other.ability.extra.copy_joker = nil
  other.ability.extra.copy_pos = 0
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
for k, v in pairs(other.ability) do
    if type(v) == 'table' then 
        new_card.ability[k] = copy_table(v)
    else
        new_card.ability[k] = v
    end
end
'''
position = "after"
payload = '''
if other.config.center.name == "ruins_of_alph" then
  new_card.ability.extra.forms = {}
  new_card.ability.extra.merged = 0
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "colour = part.control.V and args.vars.colours[tonumber(part.control.V)] or not part.control.C and args.text_colour or loc_colour(part.control.C or nil, args.default_col),"
position = "at"
payload = "colour = part.control.V and args.vars.colours and args.vars.colours[tonumber(part.control.V)] or not part.control.C and args.text_colour or loc_colour(part.control.C or nil, args.default_col),"
match_indent = true


# Gligar Delay Debuff shader until after trigger
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/card_draw.lua"]'
pattern = "if self.debuff then"
position = "at"
payload = "if self.debuff and not self.delay_debuff_sprites then"
match_indent = true

#fix booster pack choices being deducted when a consumable in the jokers area is used
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "if area == G.consumeables then"
position = "at"
payload = "if area == G.consumeables or area == G.jokers then"
match_indent = true

# Post Discard context
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
check_for_unlock({type = 'discard_custom', cards = cards})
'''
position = "after"
payload = '''
if not hook then
  SMODS.calculate_context({post_discard = true})
end
'''
match_indent = true

#Lapras fix
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "if G.shop and not G.shop.alignment.offset.py then"
position = "after"
payload = "if G.GAME.lapras_skip then G.shop.alignment.offset.y = -5.3 end"
match_indent = true

# init Double-click detection variables
[[patches]]
[patches.pattern]
target = "engine/controller.lua"
pattern = "function Controller:init()"
position = "after"
payload = '''
    -- Double-click detection variables
    self.last_click_target = nil
    self.last_click_time = 0
    self.DOUBLE_CLICK_WINDOW = 0.3
'''
match_indent = false

# register double-click trigger function
[[patches]]
[patches.regex]
target = "engine/controller.lua"
pattern = "function Controller:L_cursor_press([\\s\\S]+?)^end"
position = "at"
payload = '''
function Controller:L_cursor_press(x, y)
    x = x or self.cursor_position.x
    y = y or self.cursor_position.y

    if ((self.locked) and (not G.SETTINGS.paused or G.screenwipe)) or (self.locks.frame) then return end

    -- 双击检测逻辑开始
    local current_time = love.timer.getTime() -- 使用引擎计时器
    local press_node = (self.HID.touch and self.cursor_hover.target) or self.hovering.target or self.focused.target

    if self.last_click_target and
       self.last_click_target == press_node and
       current_time - self.last_click_time <= self.DOUBLE_CLICK_WINDOW and
       press_node and press_node.is and press_node:is(Card)
    then
        -- 条件满足，确认为双击！
        G.double_clicked_card = press_node

        -- 重置状态并阻止后续的单击/拖拽
        self.last_click_target = nil
        self.last_click_time = 0
        return
    else
        -- 记录为第一次单击
        self.last_click_target = press_node
        self.last_click_time = current_time
    end
    -- 双击检测逻辑结束

    -- 如果不是双击，则执行游戏原有的单击按下逻辑
    self.cursor_down.T = {x = x / (G.TILESCALE * G.TILESIZE), y = y / (G.TILESCALE * G.TILESIZE)}
    self.cursor_down.time = G.TIMERS.TOTAL
    self.cursor_down.handled = false
    self.cursor_down.target = nil
    self.is_cursor_down = true

    if press_node then
        self.cursor_down.target = press_node.states.click.can and press_node or press_node:can_drag() or nil
    end

    if self.cursor_down.target == nil then
        self.cursor_down.target = G.ROOM
    end
end
'''
match_indent = false

# hook double-click trigger function
[[patches]]
[patches.pattern]
target = "engine/controller.lua"
pattern = "function Controller:update(dt)"
position = "after"
payload = '''
    -- 每一帧都调用触发检查函数 (替代SMODS.register_hook)
    if G.FUNCS.check_double_click_trigger then
        G.FUNCS.check_double_click_trigger()
    end
'''
match_indent = false

# Garbodor functionality
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.GAME.current_round.discards_used = G.GAME.current_round.discards_used + 1"
position = "after"
payload = '''
G.GAME.poke_ante_discards_used = (G.GAME.poke_ante_discards_used or 0) + 1
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "G.GAME.round_resets.ante = G.GAME.round_resets.ante + mod"
position = "after"
payload = '''
G.GAME.poke_ante_discards_used = 0
'''

match_indent = true

# Pokermon Family Stake Sticker Logic
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = '''
if G.PROFILES[G.SETTINGS.profile].joker_usage[v.config.center_key] then
        G.PROFILES[G.SETTINGS.profile].joker_usage[v.config.center_key].wins = G.PROFILES[G.SETTINGS.profile].joker_usage[v.config.center_key].wins or {}
        G.PROFILES[G.SETTINGS.profile].joker_usage[v.config.center_key].wins[G.GAME.stake] = (G.PROFILES[G.SETTINGS.profile].joker_usage[v.config.center_key].wins[G.GAME.stake] or 0) + 1
        G.PROFILES[G.SETTINGS.profile].joker_usage[v.config.center_key].wins_by_key[SMODS.stake_from_index(G.GAME.stake)] = (G.PROFILES[G.SETTINGS.profile].joker_usage[v.config.center_key].wins_by_key[SMODS.stake_from_index(G.GAME.stake)] or 0) + 1
      end
'''
position = "after"
payload = '''set_joker_family_win(v)'''
match_indent = true
