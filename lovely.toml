[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

#Nested check
[[patches]]
[patches.module]
source = "setup.lua"
before = "main.lua"
name = "pokermon.setup"

# Localization color
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "legendary = G.C.RARITY[4],"
position = "after"
payload = "poke_safari = G.C.RARITY['poke_safari'], poke_mega = G.C.RARITY['poke_mega'],"
match_indent = true

# Pokemon only functionality
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if v.yes_pool_flag and not G.GAME.pool_flags[v.yes_pool_flag] then add = nil end"
position = "after"
payload = '''
if v.set == 'Joker' and not v.stage and pokermon_config and pokermon_config.pokemon_only then add = nil end
if v.set == 'Joker' and v.stage and not (v.atlas == "poke_Pokedex1" or v.atlas == "poke_others") and pokermon_config and pokermon_config.gen_one then add = nil end
if add and v.set == 'Joker' and v.stage and poke_family_present(v) then add = nil end
'''
match_indent = true

# Magikarp functionality
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if next(find_joker('Splash')) then"
position = "at"
payload = "if next(find_joker('Splash')) or next(SMODS.find_card('j_poke_magikarp')) or next(SMODS.find_card('j_poke_feebas')) then"
match_indent = true

# Magikarp functionality better calc
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local splashed = SMODS.always_scores(G.play.cards[i]) or next(find_joker('Splash'))"
position = "at"
payload = "local splashed = SMODS.always_scores(G.play.cards[i]) or next(find_joker('Splash')) or next(SMODS.find_card('j_poke_magikarp')) or next(SMODS.find_card('j_poke_feebas'))"
match_indent = true

# Mimikyu Localization Functionality
[[patches]]
[patches.regex]
target = 'functions/state_events.lua'
pattern = '''if eval.saved then
  game_over = false
end'''
position = 'after'
payload = '''
  if not G.localization.misc.dictionary.ph_mr_bones_numbutils then
    G.localization.misc.dictionary.ph_mr_bones_numbutils = ""..G.localization.misc.dictionary.ph_mr_bones
  end
  sendDebugMessage(tostring(G.localization.descriptions.Joker[G.jokers.cards[i].config.center.key].name))
  G.localization.misc.dictionary.ph_mr_bones = G.localization.misc.dictionary.ph_mr_bones_numbutils:gsub("Mr. Bones", G.localization.descriptions.Joker[G.jokers.cards[i].config.center.key].name)
  '''
  
# Extra Booster Functionality
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.added_to_deck = true"
position = "after"
payload = '''
if self.config.shiny_on_add and not self.debuff then
  SMODS.change_booster_limit(1)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.added_to_deck = false"
position = "after"
payload = '''
if self.edition and self.edition.poke_shiny and G.jokers then
  if G.GAME.modifiers.poke_booster_packs then
    G.GAME.modifiers.poke_booster_packs = G.GAME.modifiers.poke_booster_packs - 1
  else
    G.GAME.modifiers.poke_booster_packs = 0
  end
end
'''
match_indent = true

# Resize Booster Pack UI for new options & Xatu - Resize Pack for All Planets
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.GAME.pack_choices = self.ability.choose or self.config.center.config.choose or 1"
position = "after"
payload = '''
if self.ability.name:find('Celestial') and next(find_joker("xatu")) then
  self.ability.extra = #G.P_CENTER_POOLS.Planet
elseif G.GAME.extra_pocket_picks and G.GAME.extra_pocket_picks > 0 then
  print(self.ability.extra)
  self.ability.extra = self.ability.extra + G.GAME.extra_pocket_picks
end
'''
match_indent = true

# Xatu Make All Planets Appear
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/game_object.lua"]'
pattern = "if G.GAME.used_vouchers.v_telescope and i == 1 then"
position = "at"
payload = '''
if next(find_joker("xatu")) then
    local _planet = G.P_CENTER_POOLS.Planet[i].key
    _card = create_card("Planet", G.pack_cards, nil, nil, true, true, _planet, 'pl1')
elseif G.GAME.used_vouchers.v_telescope and i == 1 then
'''
match_indent = true
overwrite = true

#Shiny shader
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if (self.edition and self.edition.negative) or (self.ability.name == 'Antimatter' and (self.config.center.discovered or self.bypass_discovery_center)) then
    self.children.center:draw_shader('negative_shine', nil, self.ARGS.send_to_shader)
end
'''
position = "after"
payload = '''
if (self.edition and self.edition.poke_shiny) and self.config.center and type(self.config.center) == "table" and not (self.config.center.stage or self.config.center.shiny) 
and self.label ~= "e_poke_shiny" then
    self.children.center:draw_shader('poke_shiny', nil, self.ARGS.send_to_shader)
end
'''
match_indent = true

#Gothita line functionality
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if (self.ability.set == 'Planet' or (self.ability.set == 'Booster' and self.ability.name:find('Celestial'))) and #find_joker('Astronomer') > 0 then self.cost = 0 end
'''
position = "after"
payload = '''
if (self.ability.set == 'Planet' or (self.ability.set == 'Booster' and self.ability.name:find('Celestial'))) and #find_joker('gothita') > 0 then self.cost = math.max(0, self.cost - 2 * #find_joker('gothita')) end
if (self.ability.set == 'Planet' or (self.ability.set == 'Booster' and self.ability.name:find('Celestial'))) and #find_joker('gothorita') > 0 then self.cost = math.max(0, self.cost - 3 * #find_joker('gothorita')) end
if (self.ability.set == 'Planet' or (self.ability.set == 'Booster' and self.ability.name:find('Celestial'))) and #find_joker('gothitelle') > 0 then self.cost = 0 end
'''
match_indent = true

#Drain functionality
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.sell_cost = math.max(1, math.floor(self.cost/2)) + (self.ability.extra_value or 0)"
position = "after"
payload = "if self.sell_cost < 1 then self.sell_cost = 1 end"
match_indent = true

#Deck functionality
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if card.ability.consumeable and not skip_materialize then card:start_materialize() end"
position = "after"
payload = '''
if front and G.GAME.modifiers.poke_force_seal then card:set_seal(G.GAME.modifiers.poke_force_seal) end
if _type == 'Joker' and G.GAME.modifiers.apply_type then apply_type_sticker(card); energy_increase(card, type_sticker_applied(card)) end
'''
match_indent = true

#Debuff functionality
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.perishable and self.ability.perish_tally <= 0 then 
    if not self.debuff then
        self.debuff = true
        if self.area == G.jokers then self:remove_from_deck(true) end
    end
    return
end
'''
position = "after"
payload = '''
if next(find_joker("tangrowth")) and self.ability.name == "Wild Card" then should_debuff = false end
if next(find_joker("tentacruel")) and self:get_id() == 10 then should_debuff = false end
'''
match_indent = true

#Gholdengo functionality
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.perishable and self.ability.perish_tally <= 0 then 
    if not self.debuff then
        self.debuff = true
        if self.area == G.jokers then self:remove_from_deck(true) end
    end
    return
end
'''
position = "before"
payload = '''
if self.ability.name == "gholdengo" then return end
'''
match_indent = true

# Splash Screen
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_joker'])"
position = "after"
payload = '''
if pokermon_config.pokemon_splash then
  local pokemon = {}
  for k, v in pairs(G.P_CENTERS) do
    if v.set == 'Joker' and v.stage and v.discovered then
      table.insert(pokemon, v)
    end
  end
  if #pokemon > 0 then
    local chosen = math.random(#pokemon)
    local chosencard = pokemon[chosen]
    SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, chosencard)
  end
end
'''
match_indent = true

# Description functionality, a little hacky but it works
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
if main_end then 
    desc_nodes[#desc_nodes+1] = main_end 
end
'''
position = "after"
payload = '''
if (_c.set == 'Item' or _c.set == 'Energy') and _c.poke_add_desc then
  localize{type = 'descriptions', key = _c.key, set = _c.set, nodes = desc_nodes, vars = loc_vars}
end
'''
match_indent = true

# Rapidash Shortcut effect 1/2
# Make the game think that Rapidash is Shortcut for find_joker
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = '''function find_joker(name, non_debuff)'''
position = 'after'
payload = '''  if name == "Shortcut" then
    local asdf = find_joker("poke_Shortcut")
    local fdsa = find_joker("rapidash")
    return (next(asdf) and asdf) or (next(fdsa) and fdsa) or {}
  end
  if name == "poke_Shortcut" then
    name = "Shortcut"
  end'''
match_indent = true

#Joker emplace patch
[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = '''self.cards[#self.cards+1] = card'''
position = 'at'
payload = '''  
if type(location) == "number" then
  table.insert(self.cards, location, card)
else
  self.cards[#self.cards+1] = card
end
'''
match_indent = true

# Mega Gengar functionality
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local edition = poll_edition('edi'..(key_append or '')..G.GAME.round_resets.ante)"
position = "after"
payload = '''
if edition and ((area == G.shop_jokers) or (area == G.pack_cards)) and next(SMODS.find_card('j_poke_mega_gengar')) and edition == "e_polychrome" then
  sendDebugMessage(edition)
  sendDebugMessage(inspect(edition))
  edition = {negative = true}
end
'''
match_indent = true



# Card Effect Divider
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = "elseif part.control.X or part.control.B then"
position = "before"
payload = '''
elseif part.control.br then
  local height = 0.05
  local gaps = 0.2
  local mid = 0.15
  local sides = (tonumber(part.control.br) - gaps*2 - mid) / 2
  -- spacing
  args.nodes[#args.nodes+1] = {{n=G.UIT.R, config={align = "cm", minh = height}, nodes={}}}
  if sides < gaps then
    args.nodes[#args.nodes+1] = {{n=G.UIT.C, config={align = "cm", colour = G.C.UI.TRANSPARENT_DARK, minw = tonumber(part.control.br), minh = height}}}
  else
    local temp_nodes = {{n=G.UIT.C, config={align = "cm", colour = G.C.UI.TRANSPARENT_DARK, minw = sides, minh = height}, nodes={}},
                        {n=G.UIT.C, config={align = "cm", minw = gaps}, nodes={}},
                        {n=G.UIT.C, config={align = "cm", colour = G.C.UI.TEXT_INACTIVE, minw = mid, minh = height}, nodes={}},
                        {n=G.UIT.C, config={align = "cm", minw = gaps}, nodes={}},
                        {n=G.UIT.C, config={align = "cm", colour = G.C.UI.TRANSPARENT_DARK, minw = sides, minh = height}, nodes={}}}
    args.nodes[#args.nodes+1] = {{n=G.UIT.R, config={align = "cm", minw = tonumber(part.control.br)}, nodes=temp_nodes}}
  end
'''
match_indent = true

# For previous versions
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = "elseif part.control.X then"
position = "before"
payload = '''
elseif part.control.br then
  local height = 0.05
  local gaps = 0.2
  local mid = 0.15
  local sides = (tonumber(part.control.br) - gaps*2 - mid) / 2
  -- spacing
  args.nodes[#args.nodes+1] = {{n=G.UIT.R, config={align = "cm", minh = height}, nodes={}}}
  if sides < gaps then
    args.nodes[#args.nodes+1] = {{n=G.UIT.C, config={align = "cm", colour = G.C.UI.TRANSPARENT_DARK, minw = tonumber(part.control.br), minh = height}}}
  else
    local temp_nodes = {{n=G.UIT.C, config={align = "cm", colour = G.C.UI.TRANSPARENT_DARK, minw = sides, minh = height}, nodes={}},
                        {n=G.UIT.C, config={align = "cm", minw = gaps}, nodes={}},
                        {n=G.UIT.C, config={align = "cm", colour = G.C.UI.TEXT_INACTIVE, minw = mid, minh = height}, nodes={}},
                        {n=G.UIT.C, config={align = "cm", minw = gaps}, nodes={}},
                        {n=G.UIT.C, config={align = "cm", colour = G.C.UI.TRANSPARENT_DARK, minw = sides, minh = height}, nodes={}}}
    args.nodes[#args.nodes+1] = {{n=G.UIT.R, config={align = "cm", minw = tonumber(part.control.br)}, nodes=temp_nodes}}
  end
'''
match_indent = true


#Make sure evolve before debuff
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.perish_tally == 1 then"
position = "at"
payload = "if self.ability.perish_tally and self.ability.perish_tally == 1 and not (self.ability and self.ability.extra and type(self.ability.extra) == 'table' and self.ability.extra.rounds and self.ability.extra.rounds <= 1) then"
match_indent = true


# Jirachi Double Payout
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if total_cashout_rows > 7 then"
position = "before"
payload = '''
local jirachis = find_joker('jirachi_banker')
for i = 1, #jirachis do
  add_round_eval_row({bonus = true, name='joker_jirachi'..i, pitch = pitch, dollars = dollars, card = jirachis[i]})
  dollars = dollars + dollars
end
'''
match_indent = true

#Jirachi tag fix
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "if self.name == 'Double Tag' and _context.tag.key ~= 'tag_double' then"
position = "at"
payload = "if self.name == 'Double Tag' and _context.tag.key ~= 'tag_double' and _context.tag.key ~= 'tag_poke_jirachi_tag' then"
match_indent = true

#Probopass face
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if (id > 0 and rank and rank.face) or next(find_joker("Pareidolia")) then
    return true
end
'''
position = "after"
payload = '''
if next(SMODS.find_card('j_poke_probopass')) and self.ability.name == 'Stone Card' then return true end
'''
match_indent = true


# Scry Functionality 1
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "if #G.hand.cards < 1 and #G.deck.cards < 1 and #G.play.cards < 1 then"
position = "before"
payload = '''
if not self.scry_view and type(create_scry_cardarea) == "function" then
  self.scry_view = create_scry_cardarea()
elseif self.scry_view then
  update_scry_cardarea(self.scry_view)
end
'''
match_indent = true

# Scry Functionality 2
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = "if self.config.type == 'hand' or self.config.type == 'play' or self.config.type == 'title' or self.config.type == 'voucher' then"
position = "at"
payload = "if self.config.type == 'hand' or self.config.type == 'scry' or self.config.type == 'play' or self.config.type == 'title' or self.config.type == 'voucher' then"
match_indent = true
overwrite = true


# Scry Functionality 3
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = "if self.config.type == 'hand' and not (G.STATE == G.STATES.TAROT_PACK or G.STATE == G.STATES.SPECTRAL_PACK or G.STATE == G.STATES.PLANET_PACK or G.STATE == G.STATES.SMODS_BOOSTER_OPENED) then"
position = "at"
payload = "if self.config.type == 'scry' or self.config.type == 'hand' and not (G.STATE == G.STATES.TAROT_PACK or G.STATE == G.STATES.SPECTRAL_PACK or G.STATE == G.STATES.PLANET_PACK or G.STATE == G.STATES.SMODS_BOOSTER_OPENED) then"
match_indent = true
overwrite = true

# Scry Functionality 4
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "function Game:update_round_eval(dt)"
position = "after"
payload = '''
    if G.scry_view then G.scry_view.states.visible = false end
'''
match_indent = true

# Scry Functionality 5
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = "-- TARGET: add your own CardAreas for playing card evaluation"
position = "after"
payload = "t[#t+1] = G.scry_view"
match_indent = true

# Scry Functionality 3
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local config = {}"
position = "before"
payload = '''
if card.area == G.scry_view then
    y_off = -0.05*G.CARD_H
    card_aligned = 'tm'
end
'''
match_indent = true


#Zorua Rental Incompatibility
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
self.ability.rental = _rental
self:set_cost()
'''
position = "at"
payload = '''
if self.config.center.rental_compat ~= false and not self.ability.rental then 
    self.ability.rental = _rental
    self:set_cost()
end
'''
match_indent = true
overwrite = true

#Tutorial Functionality
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local row_dollars_chips = G.HUD:get_UIE_by_ID('row_dollars_chips')"
position = "at"
payload = "local row_dollars_chips = G.HUD and G.HUD:get_UIE_by_ID('row_dollars_chips')"
match_indent = true

# Togekiss Triple Odds - Mult
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if pseudorandom('lucky_mult') < G.GAME.probabilities.normal/5 then"
position = "at"
payload = "if pseudorandom('lucky_mult') < math.pow(3, #find_joker('togekiss')) * G.GAME.probabilities.normal/5 then"
match_indent = true
overwrite = true

# Togekiss Triple Odds - Money
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if pseudorandom('lucky_money') < G.GAME.probabilities.normal/15 then"
position = "at"
payload = "if pseudorandom('lucky_money') < math.pow(3, #find_joker('togekiss')) * G.GAME.probabilities.normal/15 then"
match_indent = true
overwrite = true

# Togekiss Triple Odds - Card Description
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif _c.effect == 'Lucky Card' then loc_vars = {G.GAME.probabilities.normal, cfg.mult, 5, cfg.p_dollars, 15}"
position = "at"
payload = "elseif _c.effect == 'Lucky Card' then loc_vars = {math.pow(3, #find_joker('togekiss')) * G.GAME.probabilities.normal, cfg.mult, 5, cfg.p_dollars, 15}"
match_indent = true
overwrite = true

